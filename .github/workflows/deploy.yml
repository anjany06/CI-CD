name: Deploy Next.js to EC2
run-name: ${{ github.actor }} is deploying Next.js app üöÄ

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'next-aws-deploy/package-lock.json'
      
      - name: Install dependencies
        run: |
          cd next-aws-deploy
          npm ci
      
      - name: Run linter
        run: |
          cd next-aws-deploy
          npm run lint
      
      - name: Build application
        run: |
          cd next-aws-deploy
          npm run build

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'next-aws-deploy/package-lock.json'
      
      - name: Install dependencies and build
        run: |
          cd next-aws-deploy
          npm ci
          npm run build
      
      - name: Create deployment package
        run: |
          cd next-aws-deploy
          tar -czf ../deployment.tar.gz --exclude=node_modules --exclude=.git .
      
      - name: Deploy to EC2
        env:
          PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          HOST: ${{ secrets.HOST_IP }}
          USER: ${{ secrets.USERNAME }}
        run: |
          # Create SSH key file with proper format
          echo "$PRIVATE_KEY" > private_key.pem
          
          # Remove any Windows carriage returns and ensure proper line endings
          sed -i 's/\r$//' private_key.pem
          
          # Ensure the key ends with a newline
          echo >> private_key.pem
          
          # Set proper permissions
          chmod 600 private_key.pem
          
          # Validate SSH key format
          if ! grep -q "BEGIN.*PRIVATE KEY" private_key.pem; then
            echo "‚ùå SSH key does not contain proper BEGIN header"
            exit 1
          fi
          
          if ! grep -q "END.*PRIVATE KEY" private_key.pem; then
            echo "‚ùå SSH key does not contain proper END footer"
            exit 1
          fi
          
          # Test SSH key validation
          ssh-keygen -y -f private_key.pem > /dev/null 2>&1
          if [ $? -ne 0 ]; then
            echo "‚ùå SSH key validation failed"
            echo "Key file size: $(wc -c < private_key.pem) bytes"
            echo "Key file lines: $(wc -l < private_key.pem) lines"
            echo "First line: $(head -n1 private_key.pem)"
            echo "Last line: $(tail -n1 private_key.pem)"
            exit 1
          fi
          
          echo "‚úÖ SSH key validation passed"
          
          # Test SSH connection
          echo "Testing SSH connection..."
          ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 -i private_key.pem $USER@$HOST "echo 'SSH connection successful'"
          
          if [ $? -ne 0 ]; then
            echo "‚ùå SSH connection failed"
            exit 1
          fi
          
          echo "‚úÖ SSH connection successful"
          
          # Copy deployment package to EC2
          echo "Copying deployment package..."
          scp -o StrictHostKeyChecking=no -i private_key.pem deployment.tar.gz $USER@$HOST:/home/$USER/
          
          # Deploy on EC2
          echo "Deploying application..."
          ssh -o StrictHostKeyChecking=no -i private_key.pem $USER@$HOST << 'EOF'
            # Update system packages
            sudo apt update -y
            
            # Install Node.js if not present
            if ! command -v node &> /dev/null; then
              echo "Installing Node.js..."
              curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
              sudo apt-get install -y nodejs
            fi
            
            # Install PM2 if not present
            if ! command -v pm2 &> /dev/null; then
              echo "Installing PM2..."
              sudo npm install -g pm2
            fi
            
            # Stop existing application
            pm2 stop nextjs-app 2>/dev/null || echo "No existing app to stop"
            
            # Backup current deployment
            rm -rf ~/app-backup
            mv ~/my-app ~/app-backup 2>/dev/null || echo "No existing app to backup"
            
            # Extract new deployment
            mkdir -p ~/my-app
            tar -xzf ~/deployment.tar.gz -C ~/my-app
            cd ~/my-app
            
            # Install dependencies and build
            echo "Installing dependencies..."
            npm ci --only=production
            echo "Building application..."
            npm run build
            
            # Start application with PM2
            echo "Starting application..."
            pm2 start npm --name "nextjs-app" -- start
            pm2 save
            
            # Setup PM2 to start on boot
            pm2 startup
            pm2 save
            
            echo "‚úÖ Application deployed and running!"
            pm2 status
            
            # Clean up
            rm ~/deployment.tar.gz
          EOF
          
          # Clean up local files
          rm private_key.pem deployment.tar.gz
          echo "‚úÖ Deployment completed successfully!"