name: Deploy Next.js to EC2
run-name: ${{ github.actor }} is deploying Next.js app 🚀

on:
  push:
    branches: [main, master]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'next-aws-deploy/package-lock.json'
      
      - name: Install dependencies
        run: |
          cd next-aws-deploy
          npm ci
      
      - name: Run linter
        run: |
          cd next-aws-deploy
          npm run lint
      
      - name: Build application
        run: |
          cd next-aws-deploy
          npm run build

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'next-aws-deploy/package-lock.json'
      
      - name: Install dependencies and build
        run: |
          cd next-aws-deploy
          npm ci
          npm run build
      
      - name: Create deployment package
        run: |
          cd next-aws-deploy
          tar -czf ../deployment.tar.gz --exclude=node_modules --exclude=.git .
      
      - name: Debug secrets and setup SSH key
        env:
          PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          HOST: ${{ secrets.HOST_IP }}
          USER: ${{ secrets.USERNAME }}
        run: |
          echo "Debug information:"
          echo "HOST: ${HOST}"
          echo "USER: ${USER}"
          echo "Key length: ${#PRIVATE_KEY}"
          
          # Create SSH key file with proper format
          printf '%s\n' "$PRIVATE_KEY" > private_key.pem
          
          # Set proper permissions
          chmod 600 private_key.pem
          
          # Debug key structure
          echo "Key file created with $(wc -l < private_key.pem) lines"
          echo "First line: $(head -n1 private_key.pem)"
          echo "Last line: $(tail -n1 private_key.pem)"
          
          # Validate SSH key format
          if ! grep -q "BEGIN.*PRIVATE KEY" private_key.pem; then
            echo "❌ SSH key does not contain proper BEGIN header"
            head -n5 private_key.pem
            exit 1
          fi
          
          if ! grep -q "END.*PRIVATE KEY" private_key.pem; then
            echo "❌ SSH key does not contain proper END footer" 
            tail -n5 private_key.pem
            exit 1
          fi
          
          echo "✅ SSH key format looks correct"
          
          # Test SSH key validation with detailed output
          echo "Testing SSH key validation..."
          ssh-keygen -y -f private_key.pem > public_key.pub 2>ssh_keygen_error.log
          if [ $? -ne 0 ]; then
            echo "❌ SSH key validation failed"
            echo "ssh-keygen error output:"
            cat ssh_keygen_error.log
            exit 1
          fi
          
          echo "✅ SSH key validation passed"
          echo "Generated public key fingerprint:"
          ssh-keygen -lf private_key.pem
          
          # Test basic connectivity first
          echo "Testing basic connectivity to ${HOST}..."
          nc -zv ${HOST} 22 || {
            echo "❌ Cannot reach ${HOST}:22"
            exit 1
          }
          
          echo "✅ Port 22 is reachable"
          
          # Test SSH connection with detailed debugging
          echo "Testing SSH connection..."
          ssh -v -o StrictHostKeyChecking=no -o ConnectTimeout=30 -i private_key.pem ${USER}@${HOST} "echo 'SSH connection successful'" 2>ssh_debug.log
          
          if [ $? -ne 0 ]; then
            echo "❌ SSH connection failed"
            echo "SSH debug output:"
            cat ssh_debug.log
            exit 1
          fi
          
          echo "✅ SSH connection successful"
          
      - name: Deploy to EC2
        env:
          PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          HOST: ${{ secrets.HOST_IP }}
          USER: ${{ secrets.USERNAME }}
        run: |
          # Recreate SSH key (we know it works from previous step)
          printf '%s\n' "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          
          # Copy deployment package to EC2
          echo "Copying deployment package..."
          scp -o StrictHostKeyChecking=no -i private_key.pem deployment.tar.gz ${USER}@${HOST}:/home/${USER}/
          
          # Deploy on EC2
          echo "Deploying application..."
          ssh -o StrictHostKeyChecking=no -i private_key.pem ${USER}@${HOST} << 'EOF'
            # Check current environment
            echo "Current user: $(whoami)"
            echo "Home directory: $HOME"
            echo "Node version: $(node --version 2>/dev/null || echo 'Not installed')"
            echo "NPM version: $(npm --version 2>/dev/null || echo 'Not installed')"
            echo "PM2 version: $(pm2 --version 2>/dev/null || echo 'Not installed')"
            
            # Install Node.js if not present
            if ! command -v node &> /dev/null; then
              echo "Installing Node.js..."
              curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
              sudo apt-get install -y nodejs
            fi
            
            # Install PM2 if not present
            if ! command -v pm2 &> /dev/null; then
              echo "Installing PM2..."
              sudo npm install -g pm2
            fi
            
            # Stop existing application
            pm2 stop nextjs-app 2>/dev/null || echo "No existing app to stop"
            
            # Backup current deployment
            rm -rf ~/app-backup
            mv ~/my-app ~/app-backup 2>/dev/null || echo "No existing app to backup"
            
            # Extract new deployment
            mkdir -p ~/my-app
            tar -xzf ~/deployment.tar.gz -C ~/my-app
            cd ~/my-app
            
            # Install dependencies and build
            echo "Installing dependencies..."
            npm ci
            echo "Building application..."
            npm run build
            
            # Start application with PM2
            echo "Starting application..."
            pm2 start npm --name "nextjs-app" -- start
            pm2 save
            
            echo "✅ Application deployed and running!"
            pm2 status
            
            # Clean up
            rm ~/deployment.tar.gz
          EOF
          
          # Clean up local files
          rm private_key.pem deployment.tar.gz
          echo "✅ Deployment completed successfully!"