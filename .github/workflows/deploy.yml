name: Deploy Next.js to EC2
run-name: ${{ github.actor }} is deploying Next.js app ðŸš€

on:
  push:
    branches: [main, master]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: npm
          cache-dependency-path: next-aws-deploy/package-lock.json

      - name: Install dependencies
        working-directory: next-aws-deploy
        run: npm ci

      - name: Run linter
        working-directory: next-aws-deploy
        run: npm run lint || true

      - name: Build application
        working-directory: next-aws-deploy
        run: npm run build

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: npm
          cache-dependency-path: next-aws-deploy/package-lock.json

      - name: Install deps and build
        working-directory: next-aws-deploy
        run: |
          npm ci
          npm run build

      - name: Create deployment package
        run: |
          cd next-aws-deploy
          tar -czf ../deployment.tar.gz --exclude=node_modules --exclude=.git .

      - name: Deploy to EC2
        env:
          HOST: ${{ secrets.HOST_IP }}
          USER: ${{ secrets.USERNAME }}
          SSH_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_KEY_B64: ${{ secrets.SSH_PRIVATE_KEY_B64 }}
        run: |
          set -euo pipefail

          # Write SSH key (prefer base64 if provided)
          mkdir -p ~/.ssh
          if [ -n "${SSH_KEY_B64:-}" ]; then
            echo "$SSH_KEY_B64" | base64 -d > ~/.ssh/id_rsa
          else
            cat > ~/.ssh/id_rsa <<'KEY_EOF'
${{ secrets.SSH_PRIVATE_KEY }}
KEY_EOF
          fi

          # Normalize and secure permissions
          sed -i 's/\r$//' ~/.ssh/id_rsa || true
          chmod 700 ~/.ssh
          chmod 600 ~/.ssh/id_rsa

          # Validate key parses
          if ! ssh-keygen -y -f ~/.ssh/id_rsa >/dev/null 2>&1; then
            echo "Invalid SSH key. Recreate SSH_PRIVATE_KEY or provide SSH_PRIVATE_KEY_B64."
            exit 1
          fi

          # Known hosts and connection test
          ssh-keyscan -H "$HOST" >> ~/.ssh/known_hosts 2>/dev/null || true
          ssh -o BatchMode=yes -o IdentitiesOnly=yes -o StrictHostKeyChecking=no "$USER@$HOST" 'echo SSH OK'

          # Copy package
          scp -o IdentitiesOnly=yes -o StrictHostKeyChecking=no deployment.tar.gz "$USER@$HOST:/tmp/deployment.tar.gz"

          # Remote deploy
          ssh -o IdentitiesOnly=yes -o StrictHostKeyChecking=no "$USER@$HOST" << 'EOF'
            set -e

            # Node.js and PM2
            if ! command -v node >/dev/null 2>&1; then
              curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash - >/dev/null 2>&1
              sudo apt-get install -y nodejs >/dev/null 2>&1
            fi
            if ! command -v pm2 >/dev/null 2>&1; then
              sudo npm i -g pm2 >/dev/null 2>&1
            fi

            # Stop and backup
            pm2 stop nextjs-app 2>/dev/null || true
            rm -rf ~/app-backup 2>/dev/null || true
            [ -d ~/my-app ] && mv ~/my-app ~/app-backup || true

            # Extract new build
            mkdir -p ~/my-app
            tar -xzf /tmp/deployment.tar.gz -C ~/my-app
            cd ~/my-app

            # Install and build
            npm ci --omit=dev
            npm run build

            # Start app
            pm2 start npm --name nextjs-app -- start
            pm2 save

            # Cleanup
            rm -f /tmp/deployment.tar.gz
          EOF