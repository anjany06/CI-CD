name: Deploy Next.js to EC2
run-name: ${{ github.actor }} is deploying Next.js app ðŸš€

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'next-aws-deploy/package-lock.json'
      
      - name: Install dependencies
        run: |
          cd next-aws-deploy
          npm ci
      
      - name: Run linter
        run: |
          cd next-aws-deploy
          npm run lint
      
      - name: Build application
        run: |
          cd next-aws-deploy
          npm run build

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'next-aws-deploy/package-lock.json'
      
      - name: Install dependencies and build
        run: |
          cd next-aws-deploy
          npm ci
          npm run build
      
      - name: Create deployment package
        run: |
          cd next-aws-deploy
          tar -czf ../deployment.tar.gz --exclude=node_modules --exclude=.git .
      
      - name: Deploy to EC2
        env:
          PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          HOST: ${{ secrets.HOST_IP }}
          USER: ${{ secrets.USERNAME }}
        run: |
          # Create SSH key file with proper format and permissions
          echo "$PRIVATE_KEY" | tr -d '\r' > private_key.pem
          chmod 600 private_key.pem
          
          # Add newline at end if missing
          echo "" >> private_key.pem
          
          # Debug: Check key file structure
          echo "Key file structure:"
          head -n 1 private_key.pem
          tail -n 1 private_key.pem
          wc -l private_key.pem
          
          # Test SSH connection with verbose output
          echo "Testing SSH connection..."
          ssh -v -o StrictHostKeyChecking=no -o ConnectTimeout=30 -i private_key.pem $USER@$HOST "echo 'SSH connection successful'" 2>&1 || {
            echo "SSH connection failed. Checking key permissions..."
            ls -la private_key.pem
            echo "Key content preview:"
            head -n 2 private_key.pem
            exit 1
          }
          
          # Copy deployment package to EC2
          echo "Copying deployment package..."
          scp -o StrictHostKeyChecking=no -i private_key.pem deployment.tar.gz $USER@$HOST:/home/$USER/
          
          # Deploy on EC2
          echo "Deploying application..."
          ssh -o StrictHostKeyChecking=no -i private_key.pem $USER@$HOST << 'EOF'
            # Check if PM2 is installed
            if ! command -v pm2 &> /dev/null; then
              echo "Installing PM2..."
              npm install -g pm2
            fi
            
            # Stop existing application
            pm2 stop nextjs-app 2>/dev/null || echo "No existing app to stop"
            
            # Backup current deployment
            rm -rf ~/app-backup
            mv ~/my-app ~/app-backup 2>/dev/null || echo "No existing app to backup"
            
            # Extract new deployment
            mkdir -p ~/my-app
            tar -xzf ~/deployment.tar.gz -C ~/my-app
            cd ~/my-app
            
            # Install dependencies and build
            echo "Installing dependencies..."
            npm ci
            echo "Building application..."
            npm run build
            
            # Start application with PM2
            echo "Starting application..."
            pm2 start npm --name "nextjs-app" -- start
            pm2 save
            pm2 status
            
            # Clean up
            rm ~/deployment.tar.gz
            echo "Deployment completed successfully!"
          EOF
          
          # Clean up local files
          rm private_key.pem deployment.tar.gz
          echo "âœ… Deployment finished!"