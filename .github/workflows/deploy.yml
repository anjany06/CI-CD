name: Deploy Next.js to EC2
run-name: ${{ github.actor }} is deploying Next.js app 🚀

on:
  push:
    branches: [main, master]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'next-aws-deploy/package-lock.json'
      
      - name: Install dependencies
        run: |
          cd next-aws-deploy
          npm ci
      
      - name: Run linter
        run: |
          cd next-aws-deploy
          npm run lint
      
      - name: Build application
        run: |
          cd next-aws-deploy
          npm run build

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'next-aws-deploy/package-lock.json'
      
      - name: Install dependencies and build
        run: |
          cd next-aws-deploy
          npm ci
          npm run build
      
      - name: Create deployment package
        run: |
          cd next-aws-deploy
          tar -czf ../deployment.tar.gz --exclude=node_modules --exclude=.git .
      
      - name: Setup SSH and Deploy
        env:
          PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          HOST: ${{ secrets.HOST_IP }}
          USER: ${{ secrets.USERNAME }}
        run: |
          echo "🔧 Setting up SSH key..."
          
          # Create SSH directory
          mkdir -p ~/.ssh
          
          # Write the private key using a different method to avoid encoding issues
          cat > ~/.ssh/deploy_key << 'KEYEOF'
          ${{ secrets.SSH_PRIVATE_KEY }}
          KEYEOF
          
          # Fix line endings and permissions
          sed -i 's/\r$//' ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          
          # Debug key structure
          echo "Key file info:"
          echo "Lines: $(wc -l < ~/.ssh/deploy_key)"
          echo "Size: $(wc -c < ~/.ssh/deploy_key) bytes"
          echo "First line: $(head -n1 ~/.ssh/deploy_key)"
          echo "Last line: $(tail -n1 ~/.ssh/deploy_key)"
          
          # Add to SSH known_hosts to avoid prompts
          ssh-keyscan -H ${HOST} >> ~/.ssh/known_hosts 2>/dev/null || true
          
          # Test SSH connection with simpler approach
          echo "🔗 Testing SSH connection..."
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no -o ConnectTimeout=10 ${USER}@${HOST} "echo 'Connection successful!'" || {
            echo "❌ SSH connection failed"
            exit 1
          }
          
          echo "✅ SSH connection successful"
          
          # Copy deployment package
          echo "📦 Copying deployment package..."
          scp -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no deployment.tar.gz ${USER}@${HOST}:/tmp/
          
          # Deploy on EC2
          echo "🚀 Deploying to EC2..."
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no ${USER}@${HOST} bash << 'DEPLOYEOF'
            set -e
            
            echo "📋 Checking system requirements..."
            
            # Install Node.js if needed
            if ! command -v node &> /dev/null; then
              echo "📦 Installing Node.js..."
              curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
              sudo apt-get install -y nodejs
            fi
            
            # Install PM2 if needed
            if ! command -v pm2 &> /dev/null; then
              echo "📦 Installing PM2..."
              sudo npm install -g pm2
            fi
            
            echo "Node version: $(node --version)"
            echo "NPM version: $(npm --version)"
            echo "PM2 version: $(pm2 --version)"
            
            # Stop existing app
            echo "⏹️  Stopping existing application..."
            pm2 stop nextjs-app 2>/dev/null || true
            
            # Backup current version
            echo "💾 Creating backup..."
            rm -rf ~/app-backup 2>/dev/null || true
            [ -d ~/my-app ] && mv ~/my-app ~/app-backup || true
            
            # Extract new deployment
            echo "📂 Extracting deployment package..."
            mkdir -p ~/my-app
            tar -xzf /tmp/deployment.tar.gz -C ~/my-app
            cd ~/my-app
            
            # Install dependencies
            echo "📥 Installing dependencies..."
            npm ci --prefer-offline --no-audit
            
            # Build app
            echo "🔨 Building application..."
            npm run build
            
            # Start with PM2
            echo "🟢 Starting application..."
            pm2 start npm --name "nextjs-app" -- start
            pm2 save
            pm2 startup -u ${USER} --hp /home/${USER} || true
            
            # Verify app is running
            echo "✅ Application deployed!"
            pm2 status
            
            # Cleanup
            rm /tmp/deployment.tar.gz
          DEPLOYEOF
          
          # Cleanup local SSH key
          rm ~/.ssh/deploy_key
          echo "✅ Deployment completed successfully!"